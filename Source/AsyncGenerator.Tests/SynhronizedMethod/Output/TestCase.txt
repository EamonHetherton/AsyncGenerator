//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.ComponentModel;
using System.Runtime.CompilerServices;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.SynhronizedMethod.Input
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class TestCase
	{
		private readonly Test.MyAsyncLock _synhronized = new Test.MyAsyncLock();
		private readonly Test.MyAsyncLock _noOptimizationSynhronized = new Test.MyAsyncLock();
		private readonly Test.MyAsyncLock _noOptimizationNoInliningSynhronized = new Test.MyAsyncLock();
		private static readonly Test.MyAsyncLock ReadonlySynhronized2 = new Test.MyAsyncLock();
		[MethodImpl()]
		public async Task SynhronizedAsync()
		{
			using (await _synhronized.LockAsync())
			{
				await (SimpleFile.ReadAsync());
			}
		}

		[MethodImpl(MethodImplOptions.NoOptimization)]
		public async Task NoOptimizationSynhronizedAsync()
		{
			using (await _noOptimizationSynhronized.LockAsync())
			{
				await (SimpleFile.ReadAsync());
			}
		}

		[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining | MethodImplOptions.PreserveSig)]
		public async Task NoOptimizationNoInliningSynhronizedAsync()
		{
			using (await _noOptimizationNoInliningSynhronized.LockAsync())
			{
				await (SimpleFile.ReadAsync());
			}
		}

		[MethodImpl(MethodImplOptions.NoOptimization), ReadOnly(false)]
		public static async Task ReadonlySynhronizedAsync()
		{
			using (await ReadonlySynhronized2.LockAsync())
			{
				await (SimpleFile.ReadAsync());
			}
		}

	}
}
