//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.PreconditionOmitAsync.Input
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class TestCase
	{
		public Task<string> PreconditionReturnAsync(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException(nameof(name));
			}
			return ReadFileAsync();
		}

		public Task PreconditionVoidAsync(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException(nameof(name));
			}
			return SimpleFile.ReadAsync();
		}

		#region Split

		public static Task<string> PreconditionToSplitAsync(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException(nameof(name));
			}
			async Task<string> InternalPreconditionToSplitAsync()
			{
				for (var i = 0; i < 5; i++)
				{
					if (i == 1)
					{
						continue;
					}

					break;
				}

				await (SimpleFile.ReadAsync());
				return "";
			}
			return InternalPreconditionToSplitAsync();
		}

		#endregion Split

		public Task<string> SyncPreconditionAsync(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException(nameof(name));
			}
			try
			{
				return Task.FromResult<string>(SyncReadFile());
			}
			catch (Exception ex)
			{
				return Task.FromException<string>(ex);
			}
		}

		public async Task<string> ReadFileAsync()
		{
			await (SimpleFile.ReadAsync());
			return "";
		}
	}
}
