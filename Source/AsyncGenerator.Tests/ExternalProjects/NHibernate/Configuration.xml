<?xml version="1.0" encoding="utf-8"?>
<AsyncGenerator xmlns="https://github.com/maca88/AsyncGenerator">
  <Solution filePath="..\..\ExternalProjects\NHibernate\Source\src\NHibernate.sln">
    <Projects>
      <Project name="NHibernate">
        <Analyzation>
          <MethodConversion>
            <Method conversion="Ignore" hasAttributeName="ObsoleteAttribute" />
            <!--The Seed method that was recognized to be async is never used as async. -->
            <Method conversion="Ignore" name="PostProcessInsert" containingTypeName="HqlSqlWalker" />

            <!--We need to adjust proxy code generation to call IInterceptor async-->
            <Method conversion="Ignore" name="Intercept" containingTypeName="IInterceptor" />

            <!--Is called by DefaultDynamicLazyFieldInterceptor.Intercept-->
            <Method conversion="Ignore" name="Intercept" containingTypeName="IFieldInterceptor" />
            <Method conversion="Ignore" name="InitializeOrGetAssociation" containingTypeName="AbstractFieldInterceptor" />
            
            <!--Is called by AbstractFieldInterceptor.Intercept-->
            <Method conversion="Ignore" name="InitializeLazyProperty" containingTypeName="ILazyPropertyInitializer" />
            <Method conversion="Ignore" name="InitializeLazyPropertiesFromDatastore" containingTypeName="AbstractEntityPersister" />
            <Method conversion="Ignore" name="InitializeLazyPropertiesFromCache" containingTypeName="AbstractEntityPersister" />

            <!--Is called by DefaultLazyInitializer.Intercept-->
            <Method conversion="Ignore" name="Invoke" containingTypeName="BasicLazyInitializer" />

            <!--Generated because of proxy.HibernateLazyInitializer.GetImplementation, but it's not async in this case-->
            <Method conversion="Ignore" name="SetReadOnly" containingTypeName="StatefulPersistenceContext" />
            <Method conversion="Ignore" name="Unproxy" containingTypeName="StatefulPersistenceContext" />
            <Method conversion="Ignore" name="Contains" containingTypeName="CollectionType" />
            <Method conversion="Ignore" name="GuessClass" containingTypeName="NHibernateProxyHelper" />
            <Method conversion="Ignore" name="IsPropertyInitialized" containingTypeName="NHibernateUtil" />
            <Method conversion="Ignore" name="BestGuessEntityName" containingTypeName="ISession" />
            <Method conversion="Ignore" name="Contains" containingTypeName="ISession" />
            <Method conversion="Ignore" name="BestGuessEntityName" containingTypeName="ISessionImplementor" />
            <Method conversion="Ignore" name="Contains" containingTypeName="ISessionImplementor" />

            <!--The Seed method that was recognized to be async is never used as async.-->
            <Method conversion="Ignore" name="GetUnsavedVersionValue" containingTypeName="UnsavedValueFactory" />

            <!--No one calls us :'(-->
            <Method conversion="Ignore" name="ReadSize" containingTypeName="AbstractPersistentCollection" />
            <Method conversion="Ignore" name="ReadIndexExistence" containingTypeName="AbstractPersistentCollection" />
            <Method conversion="Ignore" name="ReadElementExistence" containingTypeName="AbstractPersistentCollection" />
            <Method conversion="Ignore" name="ReadElementByIndex" containingTypeName="AbstractPersistentCollection" />
            <Method conversion="Ignore" name="Read" containingTypeName="AbstractPersistentCollection" />
            <Method conversion="Ignore" name="Write" containingTypeName="AbstractPersistentCollection" />

            <!--No one calls us :'(-->
            <Method conversion="Ignore" name="GetSize" containingTypeName="ICollectionPersister" />
            <Method conversion="Ignore" name="IndexExists" containingTypeName="ICollectionPersister" />
            <Method conversion="Ignore" name="ElementExists" containingTypeName="ICollectionPersister" />
            <Method conversion="Ignore" name="GetElementByIndex" containingTypeName="ICollectionPersister" />
            <Method conversion="Ignore" name="Exists" containingTypeName="ICollectionPersister" />
            <Method conversion="Ignore" name="Exists" containingTypeName="AbstractCollectionPersister" />


            <Method conversion="ToAsync" name="ExecuteReader" containingTypeName="IBatcher" />
            <Method conversion="ToAsync" name="ExecuteNonQuery" containingTypeName="IBatcher" />

            <Method conversion="ToAsync" rule="EventListener" />
          </MethodConversion>
          <SearchForAsyncCounterparts>
            <Method search="false" name="GetFieldValue" />
            <Method search="false" name="IsDBNull" />
            <Method search="false" name="WriteLine" />
          </SearchForAsyncCounterparts>
          <CallForwarding>true</CallForwarding>
          <CancellationTokens>
            <Guards>true</Guards>
            <MethodParameter>
              <Method parameter="Optional" anyInterfaceRule="PubliclyExposedType" />
              <Method parameter="Optional" rule="PubliclyExposedType" />
              <Method parameter="Required" />
            </MethodParameter>
            <RequiresCancellationToken>
              <Method tokenRequired="true" rule="EventListener" />
            </RequiresCancellationToken>
          </CancellationTokens>
          <ScanMethodBody>true</ScanMethodBody>
        </Analyzation>
        <Transformation>
          <AsyncLock type="NHibernate.Util.AsyncLock" methodName="LockAsync" />
          <LocalFunctions>true</LocalFunctions>
          <ConfigureAwaitArgument>false</ConfigureAwaitArgument>
        </Transformation>
        <RegisterPlugin>
          <Plugin type="AsyncGenerator.Tests.ExternalProjects.NHibernate.TransactionScopeRewriter" assemblyName="AsyncGenerator.Tests" /> <!--Rewrite TransactionScope in AdoNetWithDistributedTransactionFactory-->
        </RegisterPlugin>
      </Project>

      <Project name="NHibernate.DomainModel">
        <Analyzation>
          <ScanMethodBody>true</ScanMethodBody>
          <ScanForMissingAsyncMembers>
            <Type scan="true"></Type>
          </ScanForMissingAsyncMembers>
        </Analyzation>
      </Project>

      <Project name="NHibernate.Test">
        <Analyzation>
          <MethodConversion>
            <Method conversion="Ignore" hasAttributeName="IgnoreAttribute" />
            <Method conversion="Smart" hasAttributeName="TestAttribute" />
          </MethodConversion>
          <PreserveReturnType>
            <Method preserve="true" hasAttributeName="TestAttribute" />
          </PreserveReturnType>
          <ScanForMissingAsyncMembers>
            <Type scan="true" anyInterfaceRule="NHibernateAssembly" />
          </ScanForMissingAsyncMembers>
          <CancellationTokens>
            <RequiresCancellationToken>
              <Method tokenRequired="false" hasAttributeName="TestAttribute" />
            </RequiresCancellationToken>
          </CancellationTokens>
          <ScanMethodBody>true</ScanMethodBody>
          <DocumentSelection>
            <Document select="false" filePathEndsWith="Linq\MathTests.cs" />
            <Document select="false" filePathEndsWith="Linq\ExpressionSessionLeakTest.cs" />
          </DocumentSelection>
          <TypeConversion>
            <Type conversion="Ignore" name="NorthwindDbCreator" />
            <!--Ignored for performance reasons-->
            <Type conversion="Ignore" name="ObjectAssert" />
            <!--Has a TestFixture attribute but is not a test-->
            <Type conversion="Ignore" name="LinqReadonlyTestsContext" />
            <!--SetUpFixture-->
            <Type conversion="Ignore" hasAttributeName="IgnoreAttribute" />

            <Type conversion="NewType" hasAttributeName="TestFixtureAttribute" />

            <Type conversion="Ignore" rule="IsTestCase" />
            <Type conversion="Ignore" anyBaseTypeRule="IsTestCase" />
          </TypeConversion>
        </Analyzation>
        <RegisterPlugin>
          <Plugin type="AsyncGenerator.Tests.ExternalProjects.NHibernate.TransactionScopeRewriter" assemblyName="AsyncGenerator.Tests" />
          <Plugin type="AsyncGenerator.Tests.ExternalProjects.NHibernate.LinqAsyncCounterpartsFinder" assemblyName="AsyncGenerator.Tests" />
          <Plugin type="NUnitAsyncCountepartFinder" />
        </RegisterPlugin>
      </Project>
    </Projects>
    <ApplyChanges>true</ApplyChanges>
    <ConcurrentRun>true</ConcurrentRun>
  </Solution>
  <MethodRules>
    <MethodRule name="EventListener">
      <Filters>
        <Filter containingTypeName="IAutoFlushEventListener" />
        <Filter containingTypeName="IFlushEventListener" />
        <Filter containingTypeName="IDeleteEventListener" />
        <Filter containingTypeName="ISaveOrUpdateEventListener" />
        <Filter containingTypeName="IPostCollectionRecreateEventListener" />
        <Filter containingTypeName="IPostCollectionRemoveEventListener" />
        <Filter containingTypeName="IPostCollectionUpdateEventListener" />
        <Filter containingTypeName="IPostDeleteEventListener" />
        <Filter containingTypeName="IPostInsertEventListener" />
        <Filter containingTypeName="IPostUpdateEventListener" />
        <Filter containingTypeName="IPreCollectionRecreateEventListener" />
        <Filter containingTypeName="IPreCollectionRemoveEventListener" />
        <Filter containingTypeName="IPreCollectionUpdateEventListener" />
        <Filter containingTypeName="IPreDeleteEventListener" />
        <Filter containingTypeName="IPreInsertEventListener" />
        <Filter containingTypeName="IPreLoadEventListener" />
        <Filter containingTypeName="IPreUpdateEventListener" />
      </Filters>
    </MethodRule>
    <MethodRule name="PubliclyExposedType">
      <Filters>
        <Filter containingNamespace="NHibernate" />
        <Filter containingType="NHibernate.Tool.hbm2ddl.SchemaUpdate" />
        <Filter containingType="NHibernate.Tool.hbm2ddl.SchemaValidator" />
        <Filter containingType="NHibernate.Tool.hbm2ddl.SchemaExport" />
      </Filters>
    </MethodRule>
  </MethodRules>
  <TypeRules>
    <TypeRule name="NHibernateAssembly">
      <Filters>
        <Filter containingAssemblyName="NHibernate" />
      </Filters>
    </TypeRule>
    <TypeRule name="IsTestCase">
      <Filters>
        <Filter name="TestCase" />
      </Filters>
    </TypeRule>
  </TypeRules>
  <CSharpScript>
    <![CDATA[
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AsyncGenerator.Core;
using AsyncGenerator.Core.Configuration;
using AsyncGenerator.Core.Plugins;
using Microsoft.CodeAnalysis;

public class NUnitAsyncCountepartFinder : IAsyncCounterpartsFinder
{
	public Task Initialize(Project project, IProjectConfiguration configuration)
	{
		return Task.CompletedTask;
	}

	public IEnumerable<IMethodSymbol> FindAsyncCounterparts(IMethodSymbol syncMethodSymbol, ITypeSymbol invokedFromType, AsyncCounterpartsSearchOptions options)
	{
		if (syncMethodSymbol.Name != "That" || syncMethodSymbol.ContainingType.Name != "Assert" ||syncMethodSymbol.ContainingType.ContainingNamespace.ToString() != "NUnit.Framework")
		{
			yield break;
		}

		var firstParamType = syncMethodSymbol.Parameters.First().Type;
		if (firstParamType.Name == "ActualValueDelegate" || firstParamType.Name == "TestDelegate")
		{
			yield return syncMethodSymbol;
		}
	}
}
]]>
  </CSharpScript>
</AsyncGenerator>