//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.ParallelFor.Input
{
	using System.Threading;
	public partial class TestCase
	{
		public async Task ReadAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			await (Task.WhenAll(Enumerable.Range(1, 100 - 1).Select(i =>
			{
				return SimpleFile.ReadAsync(cancellationToken);
			})));
			await (Task.WhenAll(Enumerable.Range(1, 100 - 1).Select((obj) => ReadAsync(obj, cancellationToken))));
			await (Task.WhenAll(Enumerable.Range(1, 100 - 1).Select(async i =>
			{
				await (SimpleFile.ReadAsync(cancellationToken));
				await (Task.WhenAll(Enumerable.Range(1, 100 - 1).Select(j =>
				{
					return SimpleFile.ReadAsync(cancellationToken);
				})));
			})));
			Parallel.For(1, 100, s => Console.WriteLine(s));

			// Not supported cases
			Parallel.For(1L, 100L, Read);
			Parallel.For(1L, 100L, i =>
			{
				SimpleFile.Read();
			});
			Parallel.For(1, 100, (i, state) =>
			{
				SimpleFile.Read();
			});
			Parallel.For(1L, 100L, (i, state) =>
			{
				SimpleFile.Read();
			});
			Parallel.For(1, 100, (i, state) =>
			{
				SimpleFile.Read();
				Parallel.For(1L, 100L, j =>
				{
					SimpleFile.Read();
				});
			});
			var completed = Parallel.For(1, 100, Read).IsCompleted;
			var result = Parallel.For(1, 100, Read);
		}

		private Task ReadAsync(int i, CancellationToken cancellationToken = default(CancellationToken))
		{
			return SimpleFile.ReadAsync(cancellationToken);
		}
	}
}
