//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;
using NUnit.Framework;

namespace AsyncGenerator.Tests.AnonymousFunctions.Input
{
	using System.Threading;

	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class TestCase
	{
		public void ReadAsync()
		{
			Assert.DoesNotThrowAsync(() =>
			{
				Console.WriteLine();
				return SimpleFile.ReadAsync(CancellationToken.None);
			});
		}

		public void Read3Async()
		{
			Assert.DoesNotThrowAsync(() =>
			{
				return SimpleFile.ReadAsync(CancellationToken.None);
			});
		}

		public Task Read4Async()
		{
			try
			{
				var list = new List<RunFunction>();
				list.Add(new RunFunction(() =>
				{
					SimpleFile.Read();
				}

				));
				return SimpleFile.ReadAsync(CancellationToken.None);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public void Read5Async()
		{
			Assert.DoesNotThrowAsync(() => SimpleFile.ReadAsync(CancellationToken.None));
		}

		public void Read7Async()
		{
			Assert.DoesNotThrowAsync(() => SimpleFile.StreamReadAsync(CancellationToken.None));
		}

		public void Read8Async()
		{
			Assert.DoesNotThrowAsync(() => {ReadAsync();return Task.CompletedTask;});
		}

		public void Read9Async()
		{
			Assert.ThrowsAsync<Exception>(() => SimpleFile.ReadAsync(CancellationToken.None));
		}

		public async Task<bool> Read10Async()
		{
			var result = false;
			Assert.That(() => result = SimpleFile.Write(""), Throws.Nothing);

			RunFunction test = null;
			Assert.That(() => test = SimpleFile.Write<RunFunction>(""), Throws.Nothing);

			await (SimpleFile.ReadAsync(CancellationToken.None));
			return result;
		}

		public Task Read13Async()
		{
			return Runner.RunAsync(Console.WriteLine);
		}
	}
}
