//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.ParallelForEach.Input
{
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class TestCase
	{
		public async Task ReadAsync()
		{
			await (Task.WhenAll(Enumerable.Range(1, 100).Select(i =>
			{
				return SimpleFile.ReadAsync();
			})));
			await (Task.WhenAll(Enumerable.Range(1, 100).Select((obj) => ReadAsync(obj))));
			await (Task.WhenAll(GetStringList().Select(i =>
			{
				return SimpleFile.ReadAsync();
			})));
			await (Task.WhenAll(GetStringList().Select((obj) => ReadAsync(obj))));
			await (Task.WhenAll(Results.Select((obj) => ReadAsync(obj))));
			await (Task.WhenAll(Enumerable.Empty<string>().Select((obj) => ReadAsync(obj))));
			await (Task.WhenAll(GetStringList().Select(async i =>
			{
				await (SimpleFile.ReadAsync());
				await (Task.WhenAll(GetStringList().Select(j =>
				{
					return SimpleFile.ReadAsync();
				})));
			})));
			Parallel.ForEach(Enumerable.Empty<string>(), s => Console.WriteLine(s));
			Parallel.ForEach(Enumerable.Empty<string>(), File.Delete);

			// Not supported cases
			Parallel.ForEach(Enumerable.Range(1, 100), (i, state) =>
			{
				SimpleFile.Read();
			});
			Parallel.ForEach(Enumerable.Range(1, 100), (i, state, arg3) =>
			{
				SimpleFile.Read();
			});
			Parallel.ForEach(GetStringList(), (i, state, arg3) =>
			{
				SimpleFile.Read();
				Parallel.ForEach(GetStringList(), j =>
				{
					SimpleFile.Read();
				});
			});
			var completed = Parallel.ForEach(Results, Read).IsCompleted;
			var result = Parallel.ForEach(Results, Read);
		}

		private Task ReadAsync(int i)
		{
			return SimpleFile.ReadAsync();
		}

		private Task ReadAsync(string i)
		{
			return SimpleFile.ReadAsync();
		}
	}
}
