//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.Formatting.Input
{
	using System.Threading;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class MethodBodyBraces
	{
		public Task TestAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return SimpleFile.ReadAsync(cancellationToken);
		}

		public Task Test2Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return SimpleFile.ReadAsync(cancellationToken);
		}

		public Task Test3Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				Test3();
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		Task<T> TestAsync<T>(CancellationToken cancellationToken = default(CancellationToken)) where T : class, new()
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<T>(cancellationToken);
			}
			return Test2Async<T>(cancellationToken);
		}

		public async Task<T> Test2Async<T>(CancellationToken cancellationToken = default(CancellationToken)) where T : class
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (SimpleFile.ReadAsync(cancellationToken));
			return default(T);
		}

	}
}
