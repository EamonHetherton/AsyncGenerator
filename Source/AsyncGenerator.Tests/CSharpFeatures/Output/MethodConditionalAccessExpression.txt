//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.CSharpFeatures.Input
{
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class MethodConditionalAccessExpression
	{
		public async Task<object> ReturnVariableAsync()
		{
			var reader = GetReader();
			var readContentAsObjectTask = reader?.ReadContentAsObjectAsync();
			if (readContentAsObjectTask != null)
			{
				var result = (await (readContentAsObjectTask)).ToString().ToUpper();
				if (result == "Test")
				{
					return null;
				}
				return result;
			}
			return default(object);
		}

		public async Task<bool> ExpressionAsync()
		{
			var reader = GetReader();
			var readContentAsObjectTask = reader?.ReadContentAsObjectAsync();
			if (readContentAsObjectTask != null)
			{
				(await (readContentAsObjectTask)).ToString();
				return true;
			}
			return true;
		}
	}
}
