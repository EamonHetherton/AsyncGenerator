//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.Generics.Input
{
	public partial class TestCase
	{
		public async Task<IList<IEnumerable<T>>> ComplexWriteAsync<T>(string path)
		{
			await (SimpleFile.WriteAsync(path));
			return new List<IEnumerable<T>>();
		}

		public async Task<IList<T>> WriteAsync<T>(string path)
		{
			await (SimpleFile.WriteAsync(path));
			return new List<T>();
		}

		public async Task<T> ReadAsync<T>()
		{
			await (SimpleFile.ReadAsync());
			return default(T);
		}
	}


	public partial class GenericTestCase<T>
	{

		public Task<IList<IEnumerable<T>>> ComplexWriteAsync(string path)
		{
			return _testCase.ComplexWriteAsync<T>(path);
		}

		public Task<IList<T>> WriteAsync(string path)
		{
			return _testCase.WriteAsync<T>(path);
		}

		public Task<T> ReadAsync()
		{
			return _testCase.ReadAsync<T>();
		}
	}

	public partial class StringTestCase : GenericTestCase<string>
	{
		public Task<IList<IEnumerable<string>>> StringComplexWriteAsync(string path)
		{
			return ComplexWriteAsync(path);
		}

		public Task<IList<string>> StringWriteAsync(string path)
		{
			return WriteAsync(path);
		}

		public Task<string> StringReadAsync()
		{
			return ReadAsync();
		}
	}
}
