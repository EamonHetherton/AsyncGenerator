//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.SimpleCircularCall.Input
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class TestCase
	{
		public Task Method1Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			return Method2Async(cancellationToken);
		}

		public async Task Method2Async(CancellationToken cancellationToken = default(CancellationToken))
		{
			if (!await (ReadFileAsync(cancellationToken)))
			{
				await (Method1Async(cancellationToken));
			}
		}

		public async Task<bool> ReadFileAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			await (SimpleFile.ReadAsync(cancellationToken));
			return true;
		}
	}
}
