//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.CallForwarding.Input
{
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial interface IInterface
	{
		Task SyncReadAsync();

		Task<bool> SyncWriteAsync();
	}

	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class TestCase : IInterface
	{
		public Task SyncMethodAsync()
		{
			try
			{
				for (var i = 0; i < 100; i++)
				{
					Console.WriteLine("Hello!");
				}

				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task SyncMethod2Async()
		{
			try
			{
				SyncMethod2();
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task<bool> SyncMethod3Async(string content)
		{
			if (content == null)
			{
				throw new ArgumentNullException();
			}
			try
			{
				return Task.FromResult<bool>(SyncMethod3(content));
			}
			catch (Exception ex)
			{
				return Task.FromException<bool>(ex);
			}
		}

		Task IInterface.SyncReadAsync()
		{
			try
			{
				((IInterface)this).SyncRead();
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		Task<bool> IInterface.SyncWriteAsync()
		{
			try
			{
				return Task.FromResult<bool>(((IInterface)this).SyncWrite());
			}
			catch (Exception ex)
			{
				return Task.FromException<bool>(ex);
			}
		}

		public Task ReadAsync()
		{
			return SimpleFile.ReadAsync();
		}
	}
}
