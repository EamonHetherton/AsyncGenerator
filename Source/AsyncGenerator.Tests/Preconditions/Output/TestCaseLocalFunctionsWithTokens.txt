//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using AsyncGenerator.TestCases;

namespace AsyncGenerator.Tests.Preconditions.Input
{
	using System.Threading.Tasks;
	using System.Threading;

	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class TestCase
	{
		public Task ReadFileAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (path == null)
			{
				throw new ArgumentNullException(nameof(path));
			}
			return SimpleFile.ReadAsync(cancellationToken);
		}

		public Task<int> DivideAsync(int a, int b, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (b == 0) throw new InvalidOperationException();
			return InternalDivideAsync();
			async Task<int> InternalDivideAsync()
			{
				await (SimpleFile.ReadAsync(cancellationToken));
				return a/b;
			}
		}

		public async Task<int> DivideShortAsync(short a, short b, CancellationToken cancellationToken = default(CancellationToken))
		{
			Requires.IsNotNull(b, nameof(b));
			await (SimpleFile.ReadAsync(cancellationToken));
			return a/b;
		}

	}
}
